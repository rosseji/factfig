<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Factions and Figures</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Factions and Figures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Forcasting In R</title>
      <link>/2017/06/25/forcasting-in-r/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/25/forcasting-in-r/</guid>
      <description>Just some notes, findings and tips from my workshop.
Never knew what %% does. It gives the mode…
7 %% 2 ## [1] 1 Exponetial smoothing
Straight line through the data….
forcast packge defaults to Akaike’s Information Criterion (AIC) for it’s selection…
Some tools that my tutors made:
setwd(&amp;quot;/Users/rosseji/Dropbox/TrendLock/ISF/forecasting with R/&amp;quot;) # Load the three time series, as before ts1 &amp;lt;- ts(scan(&amp;quot;ts1.txt&amp;quot;), start=c(2011,1), frequency=4) ts2 &amp;lt;- ts(scan(&amp;quot;ts2.txt&amp;quot;), start=c(2011,1), frequency=12) ts3 &amp;lt;- ts(scan(&amp;quot;ts3.</description>
    </item>
    
    <item>
      <title>R Markdown</title>
      <link>/2017/06/14/r-markdown/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/14/r-markdown/</guid>
      <description>The tutorial files can be found at https://github.com/rbind/yihui/issues/14
All slides available at https://slides.yihui.name/2017-DSM-rmarkdown-Yihui-Xie.html#1
Before you get started learning how to create many different types of documents with R Markdown, you’ll have to run the following code:
install.packages(c(&amp;#39;rmarkdown&amp;#39;, &amp;#39;bookdown&amp;#39;, &amp;#39;tufte&amp;#39;, &amp;#39;rticles&amp;#39;, &amp;#39;xaringan&amp;#39;, &amp;#39;devtools&amp;#39;)) devtools::install_github(c(&amp;#39;rstudio/blogdown&amp;#39;)) You’ll also have to download LaTeX.
YAML First off, you need to establish your YAML metadata at the beginning of your document. (Yihui told us YAML stood for “Yet Another Markdown Language”, but the internet assures me it’s “YAML Ain’t Markup Language”)</description>
    </item>
    
    <item>
      <title>an example post</title>
      <link>/2017/06/09/an-example-post/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/09/an-example-post/</guid>
      <description>Hi Alex! This is Rmarkdown + blogdown …
Cool plot…</description>
    </item>
    
    <item>
      <title>machine learning</title>
      <link>/2017/06/07/machine-learning/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/07/machine-learning/</guid>
      <description>The three methods of machine learning are: classification, clustering, and regression.
 In out workshops at the Melbourne Data Science Week we spent most of our time on classification
First tip was straight out of the school of Aidan: visualise your model in the data space, rather than just visualising your data in the model space:
I understood part of the method of classification as learning that defining characteristics from a history (a sample data set with known categories) and create a map in the data space to differentiate between the categories.</description>
    </item>
    
    <item>
      <title>dealing with missing data</title>
      <link>/2017/06/02/dealing-with-missing-data/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/02/dealing-with-missing-data/</guid>
      <description>We met a great guy, Nick, who is based out of Monash Uni. He’s made two cool packages that deal with missing data!
narnia
devtools::install_github(&amp;quot;njtierney/narnia&amp;quot;) library(narnia) and
visdat
devtools::install_github(&amp;quot;njtierney/visdat&amp;quot;) library(visdat) Might be useful for things like “HoursWorked” in H.</description>
    </item>
    
    <item>
      <title>association rules</title>
      <link>/2017/06/01/association-rules/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/01/association-rules/</guid>
      <description>Measuring the likeihood that two or more factor levels (categories) appear together in observation (row). You could imagine that Aidan would want to know how likely is it that a particular beers are purchased on the same bill…
 library(arules) rules.surv &amp;lt;- titanic.raw %&amp;gt;% apriori( control = list(verbose=F), parameter = list(minlen=2, supp=0.005, conf=0.8), appearance = list(rhs=c(&amp;quot;Survived=No&amp;quot;, &amp;quot;Survived=Yes&amp;quot;), default=&amp;quot;lhs&amp;quot;)) ## keep three decimal places quality(rules.surv) &amp;lt;- rules.surv %&amp;gt;% quality() %&amp;gt;% round(digits=3) ## sort rules by lift rules.</description>
    </item>
    
    <item>
      <title>rattle for machine learning</title>
      <link>/2017/06/01/rattle/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/01/rattle/</guid>
      <description>So we are getting to work on a virtual machine just to use some fast specs, 32 core CPU and 52Gb RAM… Should be fun…
a machine learning model (trying to predict whether it will rain based on historic data…) in four clicks
… a decision tree model:
Tips: Max depth is the amount of binary splits. Min bucket is the amount of data required for the model to include the category (ie exclude) rattle logs the R code which you can just run in Rstudio (Export)</description>
    </item>
    
    <item>
      <title>Melbourne Data Science Week 2017</title>
      <link>/2017/05/31/test/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/31/test/</guid>
      <description>Nathan, Aidan and I can now blog from R so we will put up some of the other content we went through here just for fun. Then afterwards we can use it for Factions and Figures…
For example, some cool packages:
library(plotly) library(sf) And there were stickers…
 </description>
    </item>
    
  </channel>
</rss>